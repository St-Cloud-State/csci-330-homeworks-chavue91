Script started on 2025-02-05 02:02:41+00:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="91" LINES="15"]
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91/Hwork2 [0;36m([1;31mmain[0;36m) [0m$ ls
Hwork2
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91/Hwork2 [0;36m([1;31mmain[0;36m) [0m$ cd ..
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91 [0;36m([1;31mmain[0;36m) [0m$ cd sbcl-1.4.3-x86-linux
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91/sbcl-1.4.3-x86-linux [0;36m([1;31mmain[0;36m) [0m$ sbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* (NOT (EQUAL 3 (ABS -3)))

NIL
* () / (+ 8 12) 2)

10
* (+ (* 3 3) (* 4 4))

25
* (defun miles-per-gallon (initial-odometer-reading final-odometer-reading gallons-consumed) (/ (- final-odometer-reading initial-odometer-reading) gallons-consumed))

MILES-PER-GALLON
* (miles-per-gallon 1200 1500 15)

20
* (third '(the quick brown fox))

BROWN
* (list 2 'and 2 i 's is 4)

(2 AND 2 IS 4)
* (+ 1 (length (list t t t t)))

5
* (cons 'patrick '(seymour marvin))

(PATRICK SEYMOUR MARVIN)
* (cons 'patrick(  (list 'sery  ymour 'marvin))

(PATRICK SEYMOUR MARVIN)
* (myset      (defun mystery (x) (list (second x) (fist  rst x)))

MYSTERY
* (mystery '(dancing bear))

(BEAR DANCING)
* (mystery 'dancing 'bear)

debugger invoked on a SB-INT:SIMPLE-PROGRAM-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  invalid number of arguments: 2

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(MYSTERY DANCING BEAR) [external]
   source: (SB-INT:NAMED-LAMBDA MYSTERY
               (X)
             (BLOCK MYSTERY (LIST (SECOND X) (FIRST X))))
0] (mystery 'dancing 'bear)
; in: MYSTERY 'DANCING
;     (MYSTERY 'DANCING 'BEAR)
; 
; caught STYLE-WARNING:
;   The function was called with two arguments, but wants exactly one.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition

debugger invoked on a SB-INT:SIMPLE-PROGRAM-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  invalid number of arguments: 2

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 1).
  1:         Exit debugger, returning to top level.

(MYSTERY DANCING BEAR) [external]
   source: (SB-INT:NAMED-LAMBDA MYSTERY
               (X)
             (BLOCK MYSTERY (LIST (SECOND X) (FIRST X))))
0[2] (mystery '(zowei  ie))

(NIL ZOWIE)
0[2] (mystery (list 'first 'second)) res    

(SECOND FIRST)
0[2] (defun speak (x y) (list 'all 'x i 's is 'y))
; in: DEFUN SPEAK
;     (DEFUN SPEAK (X Y) (LIST 'ALL 'X 'IS 'Y))
; --> PROGN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA SPEAK
;         (X Y)
;       (BLOCK SPEAK (LIST 'ALL 'X 'IS 'Y)))
; 
; caught STYLE-WARNING:
;   The variable X is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable Y is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
SPEAK
0[2] (defun speak (x) (y) (list 'all x 'is y))
; in: DEFUN SPEAK
;     (LIST 'ALL X 'IS Y)
; 
; caught WARNING:
;   undefined variable: Y

;     (Y)
; 
; caught STYLE-WARNING:
;   undefined function: Y
; 
; compilation unit finished
;   Undefined function:
;     Y
;   Undefined variable:
;     Y
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
WARNING: redefining COMMON-LISP-USER::SPEAK in DEFUN
SPEAK
0[2] (deu fun speak ((  x) (y)) (list all 'x is 'y))
; in: DEFUN SPEAK
;     (DEFUN SPEAK ((X) (Y)) (LIST ALL 'X IS 'Y))
; --> PROGN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA SPEAK
;         ((X) (Y))
;       (BLOCK SPEAK (LIST ALL 'X IS 'Y)))
; 
; caught ERROR:
;   Required argument is not a symbol: (X)
; 
; compilation unit finished
;   caught 1 ERROR condition

debugger invoked on a SB-INT:COMPILED-PROGRAM-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  Execution of a form compiled with errors.
Form:
  #'(SB-INT:NAMED-LAMBDA SPEAK
      ((X) (Y))
    (BLOCK SPEAK (LIST ALL 'X IS 'Y)))
Compile-time error:
  Required argument is not a symbol: (X)

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 2).
  1:         Reduce debugger level (to debug level 1).
  2:         Exit debugger, returning to top level.

((LAMBDA (#:G394)) #<unused argument>)
   source: (DEFUN SPEAK ((X) (Y)) (LIST ALL 'X IS 'Y))
0[3] â€¢	(list â€™cons t nil)                     (list 'cons t nil)

(CONS T NIL)
0[3] (eval (list 'cons t nil))

(T)
0[3] (eval (eval (list 'cons t nil)))
; in: T
;     (T)
; 
; caught WARNING:
;   The function T is undefined, and its name is reserved by ANSI CL so that even
;   if it were defined later, the code doing so would not be portable.
; 
; compilation unit finished
;   Undefined function:
;     T
;   caught 1 WARNING condition

debugger invoked on a UNDEFINED-FUNCTION in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The function COMMON-LISP:T is undefined.

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 3).
  1:         Reduce debugger level (to debug level 2).
  2:         Reduce debugger level (to debug level 1).
  3:         Exit debugger, returning to top level.

("undefined function")
0[4] (apply #'cibs      '   'cons '(t nil))


debugger invoked on a SB-INT:SIMPLE-READER-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  illegal sharp macro character: #\

    Stream: #<SYNONYM-STREAM :SYMBOL *TERMINAL-IO* {910F349}>

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 4).
  1:         Reduce debugger level (to debug level 3).
  2:         Reduce debugger level (to debug level 2).
  3:         Reduce debugger level (to debug level 1).
  4:         Exit debugger, returning to top level.

(SB-IMPL::SHARP-ILLEGAL #<SYNONYM-STREAM :SYMBOL *TERMINAL-IO* {910F349}> #\  #<unused argument>)
0[5] (apply #'cons '(t nil))

(T)
0[5] (eval nil)

NIL
0[5] (list 'eval nil)

(EVAL NIL)
0[5] (eval (list 'eval nil))

NIL
0[5] SBC -EXT:EXIT
; in: T
;     (PROGN EXIT)
; 
; caught WARNING:
;   undefined variable: EXIT
; 
; compilation unit finished
;   Undefined variable:
;     EXIT
;   caught 1 WARNING condition

debugger invoked on a UNBOUND-VARIABLE in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The variable EXIT is unbound.

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 5).
  1:         Reduce debugger level (to debug level 4).
  2:         Reduce debugger level (to debug level 3).
  3:         Reduce debugger level (to debug level 2).
  4:         Reduce debugger level (to debug level 1).
  5:         Exit debugger, returning to top level.

((LAMBDA (#:G402)) #<unused argument>)
   source: (PROGN EXIT)
0[6] (SB-EXT:EXIT)
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91/sbcl-1.4.3-x86-linux [0;36m([1;31mmain[0;36m) [0m$ exit
exit

Script done on 2025-02-05 02:14:33+00:00 [COMMAND_EXIT_CODE="0"]
