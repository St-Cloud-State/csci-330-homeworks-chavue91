Script started on 2025-02-18 21:37:04+00:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="228" LINES="15"]
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91/Hwork3 [0;36m([1;31mmain[0;36m) [0m$ exitsbclcat mergesort.lispd sbcl-1.4.3-x86-linux
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91/Hwork3/sbcl-1.4.3-x86-linux [0;36m([1;31mmain[0;36m) [0m$ cat bottom-up-merg[Kgesort.lisp
(defun merge-lists (lst1 lst2)
  "Merges two sorted lists into one sorted list."
  (cond
    ((null lst1) lst2)
    ((null lst2) lst1)
    ((<= (car lst1) (car lst2)) (cons (car lst1) (merge-lists (cdr lst1) lst2)))
    (t (cons (car lst2) (merge-lists lst1 (cdr lst2))))))

(defun partition-into-pairs (lst)
  "Partitions the list into sorted pairs or singletons."
  (cond
    ((null lst) '())  ; Base case: empty list
    ((null (cdr lst)) (list lst))  ; Singleton if only one element left
    (t (cons (merge-lists (list (car lst)) (list (cadr lst))) 
             (partition-into-pairs (cddr lst))))))  ; Recursively pair elements

(defun merge-pass (lst)
  "Recursively performs one pass of merging adjacent sublists."
  (cond
    ((null lst) '())  ; If empty, return empty
    ((null (cdr lst)) lst) ; If only one sublist remains, return it
    (t (cons (merge-lists (car lst) (cadr lst)) (merge-pass (cddr lst)))))) ; Merge pairs

(defun merge-until-sorted (sublists)
  "Recursively merges sublists until only one sorted list remains."
  (if (null (cdr sublists))  ; Base case: if there's only one list, return it
      (car sublists)
      (merge-until-sorted (merge-pass sublists))))  ; Continue merging

(defun bottom-up-mergesort (lst)
  "Fully declarative bottom-up mergesort."
  (merge-until-sorted (partition-into-pairs lst)))  ; Start from sorted pairs and recursively merge

;; Example Usage
(bottom-up-mergesort '(1 7 2 1 8 6 5 3 7 9 4))
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91/Hwork3/sbcl-1.4.3-x86-linux [0;36m([1;31mmain[0;36m) [0m$ sbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* (load b "bottom-up-mergesort.lisp")

T
* )symbol-function                (symbol-function 'bottom-up-mergesort)

#<FUNCTION BOTTOM-UP-MERGESORT>
* (bottom-up-mergesort '(10 12 13 11 2 5 4 3 5 8 6 6 7 4 10 15 13 11 8 9))

(2 3 4 4 5 5 6 6 7 8 8 9 10 10 11 11 12 13 13 15)
* (bottom-up-mergesort '(2 3 4 5 6 2 3 4 5 6 8 7 5 2 4 6))

(2 2 2 3 3 4 4 4 5 5 5 6 6 6 7 8)
* (bottom-up-mers gesort '(5 6 5 4 8 3 4 9 2 15 12 3 10))

(2 3 3 4 4 5 5 6 8 9 10 12 15)
* (sb  SB-EXT:EXIT)) 
[0;32m@chavue91 [0mâžœ [1;34m/workspaces/csci-330-homeworks-chavue91/Hwork3/sbcl-1.4.3-x86-linux [0;36m([1;31mmain[0;36m) [0m$ exit
exit

Script done on 2025-02-18 21:39:57+00:00 [COMMAND_EXIT_CODE="0"]
